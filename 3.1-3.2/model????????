# model.py
import psycopg2
from patients import Patients

class Patients_DB:
    def __init__(self, host, user, password, database):
        self._observers = []  # Список наблюдателей (пациентов)
        self._data = []
        try:
            self.conn = psycopg2.connect(
                host=host,
                user=user,
                password=password,
                dbname=database
            )
            print("Подключение к базе данных было успешным")
        except Exception as e:
            print(f"Error connecting to database: {e}")



class Patient(Patients_DB):
    def attach(self, observer):
        self._observers.append(observer)

    def detach(self, observer):
        self._observers.remove(observer)

    def notify(self, message):
        for observer in self._observers:
            observer.update(message)  # Уведомление наблюдателей об изменении

    def get_data_from_db(self):
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("SELECT Name, Date_of_birth, Email, Address, Phone FROM Patients ORDER BY Name ASC")
                self._data = cursor.fetchall()
                return self._data
        except Exception as e:
            print(f"Error fetching data: {e}")
            return []  # Возвращаем пустой список в случае ошибки

    def add_patient(self, patient_data):
        try:
            with self.conn.cursor() as cursor:
                query = "INSERT INTO Patients (Name, Date_of_birth, Email, Address, Phone) VALUES (%s, %s, %s, %s, %s)"
                cursor.execute(query, (
                    patient_data['name'],
                    patient_data['dob'],
                    patient_data['email'],
                    patient_data['address'],
                    patient_data['phone']
                ))
                self.conn.commit()
                print("Пациент добавлен успешно")

                # Создание объекта пациента, который также выведет приветственное сообщение
                new_patient = Patients(patient_data['name'])
                self.attach(new_patient)  # Добавляем нового пациента как наблюдателя

                return True
        except Exception as e:
            print(f"Error adding patient: {e}")

    def delete_patient(self, patient_data):
        try:
            with self.conn.cursor() as cursor:
                query = "DELETE FROM Patients WHERE Name = %s AND Date_of_birth = %s AND Email = %s AND Address = %s AND Phone = %s"
                cursor.execute(query, (
                    patient_data['name'], patient_data['dob'], patient_data['email'], patient_data['address'],
                    patient_data['phone']))
                self.conn.commit()
                print("Пациент удален успешно")
                # Уведомляем всех наблюдателей о том, что пациент был удален
                self.notify(f"Пациент {patient_data['name']} был удален.")
                return True
        except Exception as e:
            print(f"Error deleting patient: {e}")
            return False

    def close(self):
        if self.conn:
            self.conn.close()

# Класс для врачей
class Doctor(Patients_DB):
    def get_data_from_db(self):
        try:
            with self.conn.cursor() as cursor:
                cursor.execute("SELECT Name, Specialization, Email, Phone FROM Doctors ORDER BY Name ASC")
                self._data = cursor.fetchall()
                return self._data
        except Exception as e:
            print(f"Error fetching doctor data: {e}")
            return []  # Возвращаем пустой список в случае ошибки

    def add_doctor(self, doctor_data):
        try:
            with self.conn.cursor() as cursor:
                query = "INSERT INTO Doctors (Name, Specialization, Email, Phone) VALUES (%s, %s, %s, %s)"
                cursor.execute(query, (
                    doctor_data['name'],
                    doctor_data['specialization'],
                    doctor_data['email'],
                    doctor_data['phone']
                ))
                self.conn.commit()
                print("Врач добавлен успешно")
                return True
        except Exception as e:
            print(f"Error adding doctor: {e}")
            return False

    def delete_doctor(self, doctor_data):
        try:
            with self.conn.cursor() as cursor:
                query = "DELETE FROM Doctors WHERE Name = %s AND Email = %s"
                cursor.execute(query, (
                    doctor_data['name'],
                    doctor_data['email'],
                ))
                self.conn.commit()
                print("Врач удален успешно")
                return True
        except Exception as e:
            print(f"Error deleting doctor: {e}")
            return False
