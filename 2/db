import mysql.connector

class Patients_DB:
    def __init__(self, host, user, password, database):
        self.conn = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=database
        )
        self.cursor = self.conn.cursor(dictionary=True)  # Используем словарь для удобства

    # a. Получить объект по ID
    def get_by_id(self, patient_id):
        query = "SELECT * FROM Patients WHERE PatientID = %s"
        self.cursor.execute(query, (patient_id,))
        return self.cursor.fetchone()

    # b. Получить список k по счету n объектов класса short
    def get_k_n_short_list(self, k, n):
        offset = (n - 1) * k
        query = "SELECT * FROM Patients LIMIT %s OFFSET %s"
        self.cursor.execute(query, (k, offset))
        return self.cursor.fetchall()

    # c. Добавить объект в список (при добавлении сформировать новый ID)

    def add_client(self, name, date_of_birth, email, address, phone):
        query = "INSERT INTO Patients (Name, Date_of_birth, Email, Address, Phone) VALUES (%s, %s, %s, %s, %s)"
        self.cursor.execute(query, (name, date_of_birth, email, address, phone))
        self.conn.commit()
        return self.cursor.lastrowid

    # d. Заменить элемент списка по ID
    def update_client_by_id(self, patient_id, name=None, date_of_birth=None, email=None, address=None, phone=None):
        client = self.get_by_id(patient_id)
        if client:
            query = """  
                UPDATE Patients   
                SET Name = COALESCE(%s, Name),  
                    Date_of_birth = COALESCE(%s, Date_of_birth),  
                    Email = COALESCE(%s, Email),  
                    Address = COALESCE(%s, Address),  
                    Phone = COALESCE(%s, Phone)  
                WHERE PatientID = %s  
            """
            self.cursor.execute(query, (name, date_of_birth, email, address, phone, patient_id))
            self.conn.commit()
            return True
        return False

    # e. Удалить элемент списка по ID
    def delete_client_by_id(self, patient_id):
        query = "DELETE FROM Patients WHERE PatientID = %s"
        self.cursor.execute(query, (patient_id,))
        self.conn.commit()
        return self.cursor.rowcount > 0

    # f. Получить количество элементов
    def get_count(self):
        query = "SELECT COUNT(*) as count FROM Patients"
        self.cursor.execute(query)
        result = self.cursor.fetchone()
        return result['count']

    def close(self):
        self.cursor.close()
        self.conn.close()

# Пример использования
db_entity = Patients_DB(host='localhost', user='root', password='password', database='patients_db')

# Добавление клиента
new_patient_id = db_entity.add_client('Иван Иванович', '1990-01-01', 'ivan@example.com', 'Москва', '+7-999-123-4567')
print(f"Добавлен клиент с ID {new_patient_id}")

# Получение клиента по ID
client = db_entity.get_by_id(new_patient_id)
print(client)

# Получение списка пациентов (например, вторая страница из 20 пациентов)
patients_list = db_entity.get_k_n_short_list(20, 2)
print(patients_list)

# Обновление клиента
if db_entity.update_client_by_id(new_patient_id, name='Петр Петрович'):
    print(f"Клиент с ID {new_patient_id} успешно обновлён.")
else:
    print(f"Клиент с ID {new_patient_id} не найден.")

# Удаление клиента
if db_entity.delete_client_by_id(new_patient_id):
    print(f"Клиент с ID {new_patient_id} успешно удалён.")
else:
    print(f"Не удалось удалить клиента с ID {new_patient_id}.")

# Получение количества клиентов
count = db_entity.get_count()
print(f"Количество клиентов: {count}")
