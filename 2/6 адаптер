import json
import yaml

# Базовый класс
class Patients_DB:
    def __init__(self):
        self.data = []  # Инициализируем пустые данные

    # a. Чтение всех значений из файла (реализуется в потомках)
    def read_all(self):
        raise NotImplementedError("This method should be overridden in the subclass")

    # b. Запись всех значений в файл (реализуется в потомках)
    def write_all(self):
        raise NotImplementedError("This method should be overridden in the subclass")

    # c. Получить объект по ID
    def get_by_id(self, patient_id):
        for patient in self.data:
            if patient['PatientID'] == patient_id:
                return patient
        return None

    # d. Получить список k по счету n объектов класса short
    def get_k_n_short_list(self, k, n):
        start_index = (n - 1) * k
        end_index = start_index + k
        return self.data[start_index:end_index]

    # e. Сортировать элементы по выбранному полю (по умолчанию по фамилии)
    def sort_by_field(self, field_name='Name'):
        self.data.sort(key=lambda x: x.get(field_name, ''))
        self.write_all()

    # f. Добавить объект в список (при добавлении сформировать новый ID)
    def add_patient(self, name, date_of_birth, email, address, phone):
        new_id = max([patient['PatientID'] for patient in self.data], default=0) + 1
        new_patient = {
            'PatientID': new_id,
            'Name': name,
            'Date_of_birth': date_of_birth,
            'Email': email,
            'Address': address,
            'Phone': phone
        }
        self.data.append(new_patient)
        self.write_all()

    # g. Заменить элемент списка по ID
    def update_patient_by_id(self, patient_id, name=None, date_of_birth=None, email=None, address=None, phone=None):
        patient = self.get_by_id(patient_id)
        if patient:
            if name:
                patient['Name'] = name
            if date_of_birth:
                patient['Date_of_birth'] = date_of_birth
            if email:
                patient['Email'] = email
            if address:
                patient['Address'] = address
            if phone:
                patient['Phone'] = phone
            self.write_all()
            return True
        return False

    # h. Удалить элемент списка по ID
    def delete_patient_by_id(self, patient_id):
        patient = self.get_by_id(patient_id)
        if patient:
            self.data.remove(patient)
            self.write_all()
            return True
        return False

    # i. Получить количество элементов
    def get_count(self):
        return len(self.data)

# Класс для работы с JSON
class Patients_rep_json(Patients_DB):
    def __init__(self, json_file):
        super().__init__()
        self.json_file = json_file
        self.data = self.read_all()

    # Чтение всех значений из файла JSON
    def read_all(self):
        try:
            with open(self.json_file, 'r', encoding='utf-8') as file:
                return json.load(file)
        except FileNotFoundError:
            return []

    # Запись всех значений в файл JSON
    def write_all(self):
        with open(self.json_file, 'w', encoding='utf-8') as file:
            json.dump(self.data, file, ensure_ascii=False, indent=4)

# Класс для работы с YAML
class Patients_rep_yaml(Patients_DB):
    def __init__(self, yaml_file):
        super().__init__()
        self.yaml_file = yaml_file
        self.data = self.read_all()

    # Чтение всех значений из файла YAML
    def read_all(self):
        try:
            with open(self.yaml_file, 'r', encoding='utf-8') as file:
                return yaml.safe_load(file) or []
        except FileNotFoundError:
            return []

    # Запись всех значений в файл YAML
    def write_all(self):
        with open(self.yaml_file, 'w', encoding='utf-8') as file:
            yaml.dump(self.data, file, allow_unicode=True, default_flow_style=False)

# Адаптер для работы с репозиториями
class PatientsAdapter:
    def __init__(self, patients_repository):
        """
        :param patients_repository: объект класса Patients_DB (можно JSON или YAML)
        """
        self.patients_repository = patients_repository

    def get_by_id(self, patient_id):
        return self.patients_repository.get_by_id(patient_id)

    def get_k_n_short_list(self, k, n):
        return self.patients_repository.get_k_n_short_list(k, n)

    def sort_by_field(self, field_name='Name'):
        self.patients_repository.sort_by_field(field_name)

    def add_patient(self, name, date_of_birth, email, address, phone):
        self.patients_repository.add_patient(name, date_of_birth, email, address, phone)

    def update_patient_by_id(self, patient_id, name=None, date_of_birth=None, email=None, address=None, phone=None):
        return self.patients_repository.update_patient_by_id(patient_id, name, date_of_birth, email, address, phone)

    def delete_patient_by_id(self, patient_id):
        return self.patients_repository.delete_patient_by_id(patient_id)

    def get_count(self):
        return self.patients_repository.get_count()

# Пример использования
json_patients = Patients_rep_json('patients.json')
yaml_patients = Patients_rep_yaml('patients.yaml')

# Инициализируем адаптер для работы с JSON
adapter_json = PatientsAdapter(json_patients)

# Добавить пациента  
adapter_json.add_patient("Ivan Ivanov", "01.01.1990", "ivan@example.com", "123 Main St", "+1234567890")

# Получить все записи
print(adapter_json.get_k_n_short_list(10, 1))
