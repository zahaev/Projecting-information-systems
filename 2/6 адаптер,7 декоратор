import csv  
from datetime import datetime  

# Базовый класс для работы с БД  
class DBPatientsRep:  
    def __init__(self, db_data):  
        """  
        :param db_data: список данных, представляющих записи из БД  
        """  
        self.db_data = db_data  

    def get_k_n_short_list(self, k, n):  
        """  
        Получить список из k объектов, начиная с n.  
        :param k: количество объектов для возврата  
        :param n: с какого объекта начинать  
        :return: список объектов  
        """  
        return self.db_data[n:n+k]  

    def get_count(self):  
        """  
        Получить количество объектов.  
        :return: количество объектов  
        """  
        return len(self.db_data)  

# Класс для работы с данными пациентов из файла  
class FilePatientsRep:  
    def __init__(self, file_path):  
        self.file_path = file_path  
        self.data = self._read_file()  

    def _read_file(self):  
        with open(self.file_path, newline='', encoding='utf-8') as csvfile:  
            reader = csv.DictReader(csvfile)  
            return [row for row in reader]  

    def get_k_n_short_list(self, k, n):  
        return self.data[n:n + k]  

    def get_count(self):  
        return len(self.data)  

# Адаптер для объединения источников данных  
class PatientsAdapter:  
    def __init__(self, patients_source):  
        self.patients_source = patients_source  
    
    def get_k_n_short_list(self, k, n):  
        return self.patients_source.get_k_n_short_list(k, n)  

    def get_count(self):  
        return self.patients_source.get_count()  

# Декоратор для фильтрации и сортировки  
class FilterSortDecorator:  
    def __init__(self, patients_adapter, filter_function=None, sort_key=None):  
        """  
        :param patients_adapter: объект класса PatientsAdapter  
        :param filter_function: функция фильтрации объектов (если требуется)  
        :param sort_key: ключ для сортировки объектов (если требуется)  
        """  
        self.patients_adapter = patients_adapter  
        self.filter_function = filter_function  
        self.sort_key = sort_key  

    def get_k_n_short_list(self, k, n):  
        """  
        Получить отфильтрованный и отсортированный список из k объектов, начиная с n.  
        :param k: количество объектов для возврата  
        :param n: с какого объекта начинать  
        :return: отфильтрованный и отсортированный список объектов  
        """  
        data = self.patients_adapter.patients_source.db_data  

        # Применение фильтрации  
        if self.filter_function:  
            data = list(filter(self.filter_function, data))  

        # Применение сортировки  
        if self.sort_key:  
            data.sort(key=self.sort_key)  

        # Возврат отфильтрованного и отсортированного списка  
        return data[n:n+k]  

    def get_count(self):  
        """  
        Получить количество отфильтрованных объектов.  
        :return: количество отфильтрованных объектов  
        """  
        data = self.patients_adapter.patients_source.db_data  

        # Применение фильтрации  
        if self.filter_function:  
            data = list(filter(self.filter_function, data))  

        return len(data)  

# Пример данных для базы данных  
db_data = [  
    {"PatientID": 1, "Name": "Ivan", "Date_of_birth": "11.09.2001", "Email": "@max30.ru"},  
    {"PatientID": 2, "Name": "Petr", "Date_of_birth": "25.12.1993", "Email": "@mak$im.com"},  
    {"PatientID": 3, "Name": "Sidor", "Date_of_birth": "03.09.1995", "Email": "@example.com"},  
    {"PatientID": 4, "Name": "Nikolai", "Date_of_birth": "03.08.2012", "Email": "@dotnet.com"},  
]  

# Базовый объект класса для работы с БД  
db_patients_rep = DBPatientsRep(db_data)  
db_patients_adapter = PatientsAdapter(db_patients_rep)  

# Пример фильтрации (возраст больше 28) и сортировки по дате рождения  
filter_date = datetime.strptime("01.01.2000", "%d.%m.%Y")  
filter_function = lambda client: datetime.strptime(client["Date_of_birth"], "%d.%m.%Y") > filter_date  
sort_key = lambda client: datetime.strptime(client["Date_of_birth"], "%d.%m.%Y")  

# Применение декоратора для фильтрации и сортировки  
decorated_rep = FilterSortDecorator(db_patients_adapter, filter_function, sort_key)  

# Получение отфильтрованного и отсортированного списка  
print("Отфильтрованные и отсортированные записи (дата рождения после 01.01.2000):")  
print(decorated_rep.get_k_n_short_list(2, 0))  # Возвращает первых 2 клиента  

# Получение количества отфильтрованных записей  
print("Количество отфильтрованных записей (дата рождения после 01.01.2000):")  
print(decorated_rep.get_count())
